using Microsoft.VisualStudio.TestTools.UnitTesting;
using OmegaSudoku;

namespace SudokuSolverTesting
{
    [TestClass]
    public class UnitTest1
    {

        //GENERAL ERRORS-----------------------------
        [TestMethod]
        public void emptyBoardData()
        {
            string board = "";
            Assert.ThrowsException<EmptyBoardDataException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void fileDoesntExist()
        {
            string filePath = "C:\\home\blahblah.txt";
            Assert.ThrowsException<FileDoesntExistException>(() => Controller.inputFromFile(filePath));
        }
        [TestMethod]
        public void WrongFileType()
        {
            string filePath = "TestFileForWrongTypeError.png";
            Assert.ThrowsException<WrongFileTypeException>(() => Controller.inputFromFile(filePath));
        }
        //4x4 TESTINGS----------------------------------
        [TestMethod]
        public void easy4x4()
        {
            string board = "2001100000003002";
            string trueAnswer = "2431132442133142";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void hard4x4()
        {
            string board = "0000000020010040";
            string trueAnswer = "3214412324311342";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void empty4x4()
        {
            string board = "0000000000000000";
            string trueAnswer = "1234341221434321";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void InvalidBoardSize4x4()
        {
            string board = "00000000000000001";
            Assert.ThrowsException<InvalidBoardSizeException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void InvalidCharacters4x4()
        {
            string board = "000000000000000a";
            Assert.ThrowsException<InvalidCharacterException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInRow4x4()
        {
            string board = "1100000000000000";
            Assert.ThrowsException<SameNumberInTheSameRowException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInCol4x4()
        {
            string board = "1000100000000000";
            Assert.ThrowsException<SameNumberInTheSameColumnException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInBox4x4()
        {
            string board = "1000010000000000";
            Assert.ThrowsException<SameNumberInTheSameBoxException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void Unsolveable4x4()
        {
            string board = "2001100000003012";
            Assert.ThrowsException<UnsolveableBoardException>(() => Controller.beginSolving(board));
        }
        //9x9 TESTINGS-------------------------------------------------------
        [TestMethod]
        public void easy9x9()
        {
            string board = "002000618097086205100450709523901086000864002860003007000200871009708060008640000";
            string trueAnswer = "452397618397186245186452739523971486971864352864523197645239871239718564718645923";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void hard9x9()
        {
            string board = "000004008006000500401806300900000806080900001100000000790140000000703000010260093";
            string trueAnswer = "379514268826379514451826379937451826682937451145682937793145682268793145514268793";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void empty9x9()
        {
            string board = "000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            string trueAnswer = "123456789789123456456789123312845967697312845845697312231574698968231574574968231";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void invalidBoardSize9x9()
        {
            string board = "0000000000000000000000000000000000000000000000000000000000000000000000000000000001";
            Assert.ThrowsException<InvalidBoardSizeException>(() => Controller.beginSolving(board));

        }
        [TestMethod]
        public void InvalidCharacters9x9()
        {
            string board = "0000000000000000000000000000000000000000000000000000000000000000000000000000000gh";
            Assert.ThrowsException<InvalidCharacterException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInRow9x9()
        {
            string board = "110000000000000000000000000000000000000000000000000000000000000000000000000000000";
            Assert.ThrowsException<SameNumberInTheSameRowException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInCol9x9()
        {
            string board = "100000000100000000000000000000000000000000000000000000000000000000000000000000000";
            Assert.ThrowsException<SameNumberInTheSameColumnException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInBox9x9()
        {
            string board = "100000000010000000000000000000000000000000000000000000000000000000000000000000000";
            Assert.ThrowsException<SameNumberInTheSameBoxException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void Unsolveable9x9()
        {
            string board = "302000618097086205100450709523901086000864002860003007000200871009708060008640000";
            Assert.ThrowsException<UnsolveableBoardException>(() => Controller.beginSolving(board));
        }
        //16x16 TESTINGS----------------------------------------------------
        [TestMethod]
        public void easy16x16()
        {
            string board = "01<0;05>09060:4000>000897?04<@00009=:4000<020;00070:02105>;000088006470:0@20035000:000>00005=68?0>023090?=60000009;36800<007@200?:6870040010000=<04000;2=30960?:>00159000080070090300006@47<210000100=65080000000050000807000>00:48?002000005900@07<>;3065900?:0";
            string trueAnswer = "21<@;35>89=6?:4735>;=6897?:4<@21689=:47?1<@2>;3547?:@21<5>;39=688?=647<:>@21;3597<:421>@9;35=68?1>@2359;?=68:47<59;368?=<:47@21>?:687<@4;21>359=<@471>;2=35968?:>;2159=3:68?47<@9=358?:6@47<21>;;31>9=6548?:7<@2=659?:4827<@1>;3:48?<@2731>;59=6@27<>;31659=8?:4";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void hard16x16()
        {
            string board = "048000100000000000090>007?2000000000260?;40@5=00000000;00009:<0300@100500<>006;?0000>0:0006;8010:00760?200000000020001485=00<>00<>0?0400000090:00000158@=030000<0@1000000>000;02000:70002600000800000<00000200809000?0006;0805=0>0?0080;@1000:<90000000090:07?0>";
            string trueAnswer = ";48@=9153:<>?26715=9<>3:7?2648@;3:<>267?;48@5=917?268@;415=9:<>348@1935=:<>726;?5=93>7:<?26;8@14:<>76;?248@1=935?26;@1485=93<>7:<>7?;4268@1593:=26;4158@=93:>7?<8@153:=9<>7?6;42=93:7?<>26;4@158@15=:<93>7?2;48693:<?2>76;4815=@>7?2486;@15=3:<96;485=@193:<7?2>";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void empty16x16()
        {
            string board = "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            string trueAnswer = "123456789:;<=>?@9:;<1234=>?@56785678=>?@12349:;<=>?@9:;<5678123431427586;9>:?<@=;9>:3142?<@=75867586?<@=3142;9>:?<@=;9>:7586314224136857:?9;<@=>:?9;2413<@=>68576857<@=>2413:?9;<@=>:?9;6857241343218765>;:9@=<?>;:94321@=<?87658765@=<?4321>;:9@=<?>;:987654321";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void invalidBoardSize16x16()
        {
            string board = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
            Assert.ThrowsException<InvalidBoardSizeException>(() => Controller.beginSolving(board));

        }
        [TestMethod]
        public void InvalidCharacters16x16()
        {
            string board = "xr00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            Assert.ThrowsException<InvalidCharacterException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInRow16x16()
        {
            string board = "1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            Assert.ThrowsException<SameNumberInTheSameRowException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInCol16x16()
        {
            string board = "1000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            Assert.ThrowsException<SameNumberInTheSameColumnException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInBox16x16()
        {
            string board = "1000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            Assert.ThrowsException<SameNumberInTheSameBoxException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void Unsolveable16x16()
        {
            string board = "31<0;05>09060:4000>000897?04<@00009=:4000<020;00070:02105>;000088006470:0@20035000:000>00005=68?0>023090?=60000009;36800<007@200?:6870040010000=<04000;2=30960?:>00159000080070090300006@47<210000100=65080000000050000807000>00:48?002000005900@07<>;3065900?:0";
            Assert.ThrowsException<UnsolveableBoardException>(() => Controller.beginSolving(board));
        }
        //25x25 TESTINGS-----------------------------------------------------------
        [TestMethod]
        public void easy25x25()
        {
            string board = "02010D=<0B4>0890000HEG00;00;EG0010000BD=089000CH707000H;E0000I0:10=05040009@004>A60070?F;E2:00000B0=0D0<0890>@C0700F000?0002:300:1BD000940@807A00;0G?FG?F;0I00130<500>@800A0007H0060F;00013000BD=<594>08>@800006C0000F;I2:03=05B0500=<0004>600000F;EG:000003I2050D=<800>@00006F000?00?F0002:00=00B0>@80706C0C07A0?F0EG010025BD008940000@09H7000;E0?030001D=<00<0000>@804A0CH0G000E2:00004>@00H006F000?0000:B0000=05BD00@897A0C00G?F;0001301302<5B00@89406C070?F;00;EG0F03I0:0D=0090>@00006C0C000G?F;00:13I<5B0=00000F0E0?01002500=080400C07A006CH7000F002000=0500>@800004>@0000A0F;EG010000000<D0<5094>@0H7A0C;EG?03020100000=00BD00090A0CH0G?F0E";
            string trueAnswer = "I2:13D=<5B4>@897A6CHEG?F;?F;EG2:13I<5BD=@894>6CH7A7A6CH;EG?F3I2:1D=<5B4>@89@894>A6CH7G?F;E2:13I<5BD=BD=<5894>@CH7A6F;EG?13I2:3I2:1BD=<594>@8H7A6C;EG?FG?F;EI2:13=<5BD>@894A6CH7H7A6CF;EG?13I2:BD=<594>@8>@8947A6CHEG?F;I2:13=<5BD5BD=<@894>6CH7A?F;EG:13I213I2:5BD=<894>@CH7A6F;EG?EG?F;3I2:1D=<5B4>@897A6CHCH7A6?F;EG:13I25BD=<894>@4>@89H7A6C;EG?F3I2:1D=<5B<5BD=>@894A6CH7G?F;E2:13I94>@8CH7A6F;EG?13I2:BD=<5=<5BD4>@897A6CHEG?F;I2:13:13I2<5BD=@894>6CH7A?F;EG;EG?F13I2:BD=<594>@8H7A6C6CH7AG?F;E2:13I<5BD=@894>F;EG?:13I25BD=<894>@CH7A6A6CH7EG?F;I2:13=<5BD>@894894>@6CH7A?F;EG:13I25BD=<D=<5B94>@8H7A6C;EG?F3I2:12:13I=<5BD>@894A6CH7G?F;E";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void hard25x25()
        {
            string board = "000=0C000@0H07I00B0090>;0<0;09=5GF2@C010I:00000?0000?A0;0000F2000030CD0H60I:0600?A00E<>0005G0200@0000@00000I:H0E0A4800>;0F0=0130000070:40000089<00G00=5G0000CD130:H600A00080<>00<0002000F0@CD100:H000E?A4BE00000900F005010@CI:000I0067E000B00>;0=0G00030CD00:0600?A009000200GF0100CD000C:0070000E0>;00005002=0GF0300D100:00E000B0800089<>002=50000C000000040E0000000>0805G020C01000I:060A4009<0;0000F2@0003000:0000:0000?0;000>0000000030CD03@I0060004BE0>00020000200GF00@0060000B00A4>00000000>G000001000H07000A0BE02=00D00@C007I000E?0<00090;00<00F200D03@0067I000400?A40890>;2=0G00@000H600:060I0A0000>009<G00=500D130000000:H0E?00B90008F205G";
            string trueAnswer = "GF2=5CD13@:H67IA4BE?9<>;8<>;89=5GF2@CD13I:H67BE?A4BE?A4;89<>F2=5G13@CD:H67I:H67I?A4BE<>;895GF2=3@CD13@CD167I:HBE?A489<>;GF2=513@CDH67I:4BE?A;89<>5GF2=5GF2=@CD13I:H67?A4BE89<>;9<>;82=5GF3@CD17I:H64BE?A4BE?A>;89<GF2=5D13@CI:H67I:H67E?A4B9<>;8=5GF213@CD7I:H6BE?A489<>;2=5GFD13@CD13@C:H67IA4BE?>;89<=5GF2=5GF23@CD17I:H6E?A4B;89<>89<>;F2=5G13@CD67I:HA4BE?A4BE?<>;895GF2=CD13@7I:H6?A4BE9<>;8=5GF2@CD1367I:H67I:H4BE?A;89<>F2=5GCD13@CD13@I:H67?A4BE<>;892=5GF2=5GF13@CD67I:HBE?A4>;89<;89<>GF2=5D13@CH67I:?A4BEF2=5GD13@CH67I:4BE?A<>;89>;89<5GF2=CD13@:H67IE?A4BE?A4B89<>;2=5GF3@CD1H67I:H67I:A4BE?>;89<GF2=5@CD13@CD137I:H6E?A4B9<>;8F2=5G";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void empty25x25()
        {
            string board
            string trueAnswer = "123456789:;<=>?@ABCDEFGHI;<=>?12345@ABCDFGEHI6789:6789:HIFEG12345;<=>?@ABCDGFEIH@ABCD6789:12345;<=>?@ABCD;<=>?HEGFI6789:123453152>C@D7;B?EHG8:IF<49A=648:6B31GH2=FI<>9@C;A5?DE7H?I7<459=631@A2BD>EG8:F;C9C;DE8FIA>45:7631?=2BH@<G=GAF@:?EB<89D;C45H7631>I2251?3>=AI8G@C:B<H;D974E6F7@6;42B153<HA8F>EG:=DIC?9<IGE8746;92D153A?FBC>=H:@>DCH9FG:@E746?=2I153<8;ABA:FB=<H?DC>I;E97468@2G153C6412IE;<HDB9G8?>@AF:573=5=937A8214FCHI;:BDGE?6<@>?BDGA5673@:>214C=9<HFEI8;F><@;B:C?=5673EI8214AD9GH:EH8ID9>GF?=<@A5673;CB214B3251?D48IA:F=HG;<@>9C67EI47=693@21CG>D<EF:?8H;5BAD;?<CG>567E3421H9AIB=@:F889@AFECH:BI;567=3421G>?D<EH>:G=;<FA98?B@DC567I3421";
            string actualAnswer = Controller.beginSolving(board);
            Assert.AreEqual(trueAnswer, actualAnswer);

        }
        [TestMethod]
        public void invalidBoardSize25x25()
        {
            string board
            Assert.ThrowsException<InvalidBoardSizeException>(() => Controller.beginSolving(board));

        }
        [TestMethod]
        public void InvalidCharacters25x25()
        {
            string board = "z00000000000000000000x000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            Assert.ThrowsException<InvalidCharacterException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInRow25x25()
        {
            string board = "1100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
            Assert.ThrowsException<SameNumberInTheSameRowException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInCol25x25()
        {
            string board
            Assert.ThrowsException<SameNumberInTheSameColumnException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void SameNumberInBox25x25()
        {
            string board
            Assert.ThrowsException<SameNumberInTheSameBoxException>(() => Controller.beginSolving(board));
        }
        [TestMethod]
        public void Unsolveable25x25()
        {
            string board = "A2010D=<0B4>0890000HEG00;00;EG0010000BD=089000CH707000H;E0000I0:10=05040009@004>A60070?F;E2:00000B0=0D0<0890>@C0700F000?0002:300:1BD000940@807A00;0G?FG?F;0I00130<500>@800A0007H0060F;00013000BD=<594>08>@800006C0000F;I2:03=05B0500=<0004>600000F;EG:000003I2050D=<800>@00006F000?00?F0002:00=00B0>@80706C0C07A0?F0EG010025BD008940000@09H7000;E0?030001D=<00<0000>@804A0CH0G000E2:00004>@00H006F000?0000:B0000=05BD00@897A0C00G?F;0001301302<5B00@89406C070?F;00;EG0F03I0:0D=0090>@00006C0C000G?F;00:13I<5B0=00000F0E0?01002500=080400C07A006CH7000F002000=0500>@800004>@0000A0F;EG010000000<D0<5094>@0H7A0C;EG?03020100000=00BD00090A0CH0G?F0E";
            Assert.ThrowsException<UnsolveableBoardException>(() => Controller.beginSolving(board));
        }
    }
}
